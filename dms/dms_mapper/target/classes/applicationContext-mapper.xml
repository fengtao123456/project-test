<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置属性资源文件 -->
    <context:property-placeholder location="classpath*:*.properties"/>

    <!-- 配置连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
    </bean>
    <!-- 配置mybatis sqlsessionfactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置mybatis的映射器的路径(mapper) -->
        <property name="mapperLocations"
                  value="classpath*:cn/newyork/dms/mapper/*.xml"/>
        <!-- 配置需要取类型别名的包名; -->
        <property name="typeAliasesPackage" value="cn.newyork.common.domain,cn.newyork.common.query"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>
    <!-- 配置自动扫描mybatis映射器，自动创建映射器对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 会根据cn.newyork.dms.mapper包中定义的接口，自动创建Mapper对象；bean的名为接口的名字（首字母小写） -->
        <property name="basePackage" value="cn.newyork.dms.mapper"/>
    </bean>


    <!-- 事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--注解是事务：dms-service层非base方法，可以使用-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- aop应用事务管理：注意针对basic-core上的BaseService层事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--使用了日志就需要把只读关闭-->
            <!--<tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="select*" read-only="true" />
            <tx:method name="load*" read-only="true" />
            <tx:method name="search*" read-only="true" />
            <tx:method name="query*" read-only="true" />-->

            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--
        所有service事务
        <aop:pointcut expression="execution(* cn.newyork.*.service..*.*(..))"-->
                      <!--id="servicePointcut" />-->
        <!--只针对basic事务-->
        <aop:pointcut expression="execution(* cn.newyork.core.service..*.*(..))"
                      id="servicePointcut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut" />
    </aop:config>
</beans>